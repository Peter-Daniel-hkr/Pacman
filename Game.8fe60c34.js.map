{"version":3,"sources":["js/Input.js","js/Sound.js","js/Pacman.js","js/Ghost.js","js/TileMap.js","js/Game.js"],"names":["MovingDirection","up","down","left","right","Sound","eatDotSound","Audio","powerDotSound","eatGhostSound","gameOverSound","gameWinSound","Pacman","x","y","tileSize","speed","tileMap","event","keyCode","currentMovingDirection","requestedMovingDirection","madeFirstMove","pacmanAnimationTimerDefault","pacmanAnimationTimer","pacmanRotation","Rotation","powerDotActive","powerDotAboutToExpire","timers","document","addEventListener","score","highScore","undefined","dom_score","querySelector","ctx","pause","ghosts","size","save","translate","rotate","Math","PI","drawImage","pacmanImages","pacmanImageIndex","restore","JSON","parse","localStorage","getItem","setItem","stringify","pacmanImage1","Image","src","pacmanImage2","pacmanImage3","Number","isInteger","didCollideWithEnvironment","length","eatDot","innerHTML","updateHighScore","play","eatPowerDot","forEach","timer","clearTimeout","powerDotTimer","setTimeout","push","powerDotAboutToExpireTimer","filter","ghost","collideWith","splice","indexOf","Ghost","movingDirection","floor","random","Object","keys","directionTimerDefault","directionTimer","scaredAboutToExpireTimerDefault","scaredAboutToExpireTimer","pacman","image","normalGhost","scaredGhost","scaredGhost2","newMoveDirection","min","max","TileMap","yellowDot","pinkDot","wall","powerDot","powerDotAnmationTimerDefault","powerDotAnmationTimer","row","gameMap","column","tile","canvas","width","height","direction","fillStyle","fillRect","flat","getElementById","getContext","GAME_OVER","YOU_WON","YOU_LOSE","restart","soundElement","getPacman","getGhosts","gameOver","gameWin","gameLoop","draw","drawGameEnd","checkGameOver","checkGameWin","didWin","isGameOver","some","showYouWon","drawHighScore","showYouLose","audioManager","imgSrc","SOUND_IMG","getAttribute","setAttribute","console","log","muted","style","display","gradient","createLinearGradient","addColorStop","textAlign","font","fillText","setCanvasSize","setInterval","location","reload"],"mappings":";AAOeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAPf,IAAMA,EAAkB,CACtBC,GAAI,EACJC,KAAM,EACNC,KAAM,EACNC,MAAO,GAGMJ,EAAAA,EAAAA,QAAAA,QAAAA;;ACCAK,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EARf,IAAMA,EAAQ,CACZC,YAAa,IAAIC,MAAM,sBACvBC,cAAe,IAAID,MAAM,wBACzBE,cAAe,IAAIF,MAAM,wBACzBG,cAAe,IAAIH,MAAM,wBACzBI,aAAc,IAAIJ,MAAM,wBAGXF,EAAAA,EAAAA,QAAAA,QAAAA;;AC8NZ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtOH,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,eAqOG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,kEAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,kDAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,gBAAA,EAAA,kCAAA,OAAA,EAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,KAAA,GAAA,EAAA,MAAA,IAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAnOkBO,EAAAA,WACPC,SAAAA,EAAAA,EAAGC,EAAGC,EAAUC,EAAOC,GAAS,IAAA,EAAA,KAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GA+BjC,EAAA,KAAA,WAAA,CACTb,MAAO,EACPF,KAAM,EACNC,KAAM,EACNF,GAAI,IAnCsC,EAAA,KAAA,EAAA,CAAA,UAAA,EAmFjC,MAAA,SAACiB,GACW,IAAjBA,EAAMC,UACJ,EAAKC,wBAA0BpB,EAAgBI,QAAAA,QACjD,EAAKgB,uBAAyBpB,EAAgBG,QAAAA,MAChD,EAAKkB,yBAA2BrB,EAAgBG,QAAAA,KAChD,EAAKmB,eAAgB,GAGF,IAAjBJ,EAAMC,UACJ,EAAKC,wBAA0BpB,EAAgBE,QAAAA,OACjD,EAAKkB,uBAAyBpB,EAAgBC,QAAAA,IAChD,EAAKoB,yBAA2BrB,EAAgBC,QAAAA,GAChD,EAAKqB,eAAgB,GAGF,IAAjBJ,EAAMC,UACJ,EAAKC,wBAA0BpB,EAAgBG,QAAAA,OACjD,EAAKiB,uBAAyBpB,EAAgBI,QAAAA,OAChD,EAAKiB,yBAA2BrB,EAAgBI,QAAAA,MAChD,EAAKkB,eAAgB,GAGF,IAAjBJ,EAAMC,UACJ,EAAKC,wBAA0BpB,EAAgBC,QAAAA,KACjD,EAAKmB,uBAAyBpB,EAAgBE,QAAAA,MAChD,EAAKmB,yBAA2BrB,EAAgBE,QAAAA,KAChD,EAAKoB,eAAgB,MA5GlBT,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJC,KAAAA,SAAWA,EACXC,KAAAA,MAAQA,EACRC,KAAAA,QAAUA,EAEVG,KAAAA,uBAAyB,KACzBC,KAAAA,yBAA2B,KAE3BE,KAAAA,4BAA8B,GAC9BC,KAAAA,qBAAuB,KAEvBC,KAAAA,eAAiB,KAAKC,SAAStB,MAE/BuB,KAAAA,gBAAiB,EACjBC,KAAAA,uBAAwB,EACxBC,KAAAA,OAAS,GAETP,KAAAA,eAAgB,EAErBQ,SAASC,iBAAiB,UAAW,EAAA,KArBK,IAAA,EAAA,KAAA,EAAA,GAAA,KAAA,MA0BrCC,KAAAA,MAAQ,EACRC,KAAAA,eAAYC,EACZC,KAAAA,UAAYL,SAASM,cAAc,UAsMzC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OA5LD,MAAA,SAAKC,EAAKC,EAAOC,GACVD,IACH,EAAA,KAAA,EAAA,GAAA,KAAA,MACA,EAAA,KAAA,EAAA,GAAA,KAAA,OAEF,EAAA,KAAA,EAAA,GAAA,KAAA,MACA,EAAA,KAAA,EAAA,GAAA,KAAA,MACeC,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,GAETC,IAAAA,EAAO,KAAKzB,SAAW,EAC7BsB,EAAII,OACJJ,EAAIK,UAAU,KAAK7B,EAAI2B,EAAM,KAAK1B,EAAI0B,GACtCH,EAAIM,OAA8B,GAAtB,KAAKlB,eAAsBmB,KAAKC,GAAM,KAClDR,EAAIS,UACF,KAAKC,aAAa,KAAKC,mBACtBR,GACAA,EACD,KAAKzB,SACL,KAAKA,UAGPsB,EAAIY,YAuKL,CAAA,IAAA,kBAED,MAAA,WACOhB,KAAAA,UAAYiB,KAAKC,MAAMC,aAAaC,QAAQ,gBAC5CpB,KAAAA,YAAoB,KAAKA,UAAY,KAAKD,OAC1CC,KAAAA,UAAY,KAAKD,MACjB,KAAKC,UAAY,KAAKA,UACtB,KAAKA,UAAY,KAAKD,MAC3BoB,aAAaE,QAAQ,aAAcJ,KAAKK,UAAU,KAAKtB,gBARxD,EAnOkBrB,GA+DC,SAAA,IACZ4C,IAAAA,EAAe,IAAIC,MACzBD,EAAaE,IAAM,mBAEbC,IAAAA,EAAe,IAAIF,MACzBE,EAAaD,IAAM,mBAEbE,IAAAA,EAAe,IAAIH,MACzBG,EAAaF,IAAM,mBAEdX,KAAAA,aAAe,CAClBS,EACAG,EACAC,EACAD,GAGGX,KAAAA,iBAAmB,EAkClB,SAAA,IAkBJ,GAjBE,KAAK5B,yBAA2B,KAAKC,0BAErCwC,OAAOC,UAAU,KAAKjD,EAAI,KAAKE,WAC/B8C,OAAOC,UAAU,KAAKhD,EAAI,KAAKC,YAG5B,KAAKE,QAAQ8C,0BACZ,KAAKlD,EACL,KAAKC,EACL,KAAKO,4BAGP,KAAKD,uBAAyB,KAAKC,2BAKvC,KAAKJ,QAAQ8C,0BACX,KAAKlD,EACL,KAAKC,EACL,KAAKM,wBAKP,OAFKI,KAAAA,qBAAuB,UACvBwB,KAAAA,iBAAmB,GASlB,OANyB,MAA/B,KAAK5B,wBACwB,MAA7B,KAAKI,uBAEAA,KAAAA,qBAAuB,KAAKD,6BAG3B,KAAKH,wBACNpB,KAAAA,EAAgBC,QAAAA,GACda,KAAAA,GAAK,KAAKE,MACVS,KAAAA,eAAiB,KAAKC,SAASzB,GACpC,MACGD,KAAAA,EAAgBE,QAAAA,KACdY,KAAAA,GAAK,KAAKE,MACVS,KAAAA,eAAiB,KAAKC,SAASxB,KACpC,MACGF,KAAAA,EAAgBG,QAAAA,KACdU,KAAAA,GAAK,KAAKG,MACVS,KAAAA,eAAiB,KAAKC,SAASvB,KACpC,MACGH,KAAAA,EAAgBI,QAAAA,MACdS,KAAAA,GAAK,KAAKG,MACVS,KAAAA,eAAiB,KAAKC,SAAStB,OAK/B,SAAA,IACwB,MAA7B,KAAKoB,uBAGJA,KAAAA,uBAC4B,GAA7B,KAAKA,uBACFA,KAAAA,qBAAuB,KAAKD,4BAC5ByB,KAAAA,mBACD,KAAKA,kBAAoB,KAAKD,aAAaiB,SAC7C,KAAKhB,iBAAmB,KAIpB,SAAA,IACJ,KAAK/B,QAAQgD,OAAO,KAAKpD,EAAG,KAAKC,IAAM,KAAKQ,gBACzCU,KAAAA,OAAS,EACTG,KAAAA,UAAU+B,UAAe,GAAA,OAAA,KAAKlC,OAC9BmC,KAAAA,kBACC7D,EAAAA,QAAAA,YAAY8D,QAIP,SAAA,IAAA,IAAA,EAAA,KACT,GAAA,KAAKnD,QAAQoD,YAAY,KAAKxD,EAAG,KAAKC,GAAI,CACvCkB,KAAAA,OAAS,GACTG,KAAAA,UAAU+B,UAAe,GAAA,OAAA,KAAKlC,OAC9BmC,KAAAA,kBACC3D,EAAAA,QAAAA,cAAc4D,OACfzC,KAAAA,gBAAiB,EACjBC,KAAAA,uBAAwB,EACxBC,KAAAA,OAAOyC,QAAQ,SAACC,GAAUC,OAAAA,aAAaD,KACvC1C,KAAAA,OAAS,GAEV4C,IAAAA,EAAgBC,WAAW,WAC7B,EAAK/C,gBAAiB,EACtB,EAAKC,uBAAwB,GAC5B,KAEEC,KAAAA,OAAO8C,KAAKF,GAEbG,IAAAA,EAA6BF,WAAW,WAC1C,EAAK9C,uBAAwB,GAC5B,KAEEC,KAAAA,OAAO8C,KAAKC,IAIXrC,SAAAA,EAAAA,GAAQ,IAAA,EAAA,KACZ,KAAKZ,gBACeY,EAAOsC,OAAO,SAACC,GAAUA,OAAAA,EAAMC,YAAY,KACnDT,QAAQ,SAACQ,GACrBvC,EAAOyC,OAAOzC,EAAO0C,QAAQH,GAAQ,GACrC,EAAK9C,OAAS,GACd,EAAKG,UAAU+B,UAAe,GAAA,OAAA,EAAKlC,OACnC,EAAKmC,kBACC1D,EAAAA,QAAAA,cAAc2D,SAGzB,QAAA,QAAA;;AC5FA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1IH,IAAA,EAAA,EAAA,QAAA,eA0IG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,kEAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,kDAAA,OAAA,EAAA,IAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAxIkBc,EAAAA,WACPrE,SAAAA,EAAAA,EAAGC,EAAGC,EAAUC,EAAOC,GAAS,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GACrCJ,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJC,KAAAA,SAAWA,EACXC,KAAAA,MAAQA,EACRC,KAAAA,QAAUA,EAEf,EAAA,KAAA,EAAA,GAAA,KAAA,MAEKkE,KAAAA,gBAAkBvC,KAAKwC,MAC1BxC,KAAKyC,SAAWC,OAAOC,KAAKvF,EAAZ,SAA6BgE,QAG1CwB,KAAAA,sBAAwB,EAAA,KAAA,EAAA,GAAA,KAAA,KAAa,GAAI,IACzCC,KAAAA,eAAiB,KAAKD,sBAEtBE,KAAAA,gCAAkC,GAClCC,KAAAA,yBAA2B,KAAKD,gCAsHtC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAnHD,MAAA,SAAKrD,EAAKC,EAAOsD,GACVtD,IACH,EAAA,KAAA,EAAA,GAAA,KAAA,MACA,EAAA,KAAA,EAAA,GAAA,KAAA,OAEaD,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAKuD,KA8GrB,CAAA,IAAA,cA3GD,MAAA,SAAYA,GACJpD,IAAAA,EAAO,KAAKzB,SAAW,EAE3B,OAAA,KAAKF,EAAI+E,EAAO/E,EAAI2B,GACpB,KAAK3B,EAAI2B,EAAOoD,EAAO/E,GACvB,KAAKC,EAAI8E,EAAO9E,EAAI0B,GACpB,KAAK1B,EAAI0B,EAAOoD,EAAO9E,MAqG1B,EAxIkBoE,GA2CT7C,SAAAA,EAAAA,EAAKuD,GACTA,EAAOjE,eAC0BiE,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,GAE9BC,KAAAA,MAAQ,KAAKC,YAEpBzD,EAAIS,UAAU,KAAK+C,MAAO,KAAKhF,EAAG,KAAKC,EAAG,KAAKC,SAAU,KAAKA,UAGlC6E,SAAAA,EAAAA,GACxBA,EAAOhE,uBACJ+D,KAAAA,2BACiC,IAAlC,KAAKA,2BACFA,KAAAA,yBAA2B,KAAKD,gCACjC,KAAKG,QAAU,KAAKE,YACjBF,KAAAA,MAAQ,KAAKG,aAEbH,KAAAA,MAAQ,KAAKE,cAIjBF,KAAAA,MAAQ,KAAKE,YAIH,SAAA,IACZN,KAAAA,iBACDQ,IAAAA,EAAmB,KACI,GAAvB,KAAKR,iBACFA,KAAAA,eAAiB,KAAKD,sBAC3BS,EAAmBrD,KAAKwC,MACtBxC,KAAKyC,SAAWC,OAAOC,KAAKvF,EAAZ,SAA6BgE,SAIzB,MAApBiC,GAA4B,KAAKd,iBAAmBc,GAEpDpC,OAAOC,UAAU,KAAKjD,EAAI,KAAKE,WAC/B8C,OAAOC,UAAU,KAAKhD,EAAI,KAAKC,YAG5B,KAAKE,QAAQ8C,0BACZ,KAAKlD,EACL,KAAKC,EACLmF,KAGGd,KAAAA,gBAAkBc,IAMvB,SAAA,IAEJ,IAAC,KAAKhF,QAAQ8C,0BACZ,KAAKlD,EACL,KAAKC,EACL,KAAKqE,iBAGC,OAAA,KAAKA,iBACNnF,KAAAA,EAAgBC,QAAAA,GACda,KAAAA,GAAK,KAAKE,MACf,MACGhB,KAAAA,EAAgBE,QAAAA,KACdY,KAAAA,GAAK,KAAKE,MACf,MACGhB,KAAAA,EAAgBG,QAAAA,KACdU,KAAAA,GAAK,KAAKG,MACf,MACGhB,KAAAA,EAAgBI,QAAAA,MACdS,KAAAA,GAAK,KAAKG,OAMfkF,SAAAA,EAAAA,EAAKC,GACJvD,OAAAA,KAAKwC,MAAMxC,KAAKyC,UAAYc,EAAMD,EAAM,IAAMA,EAGzC,SAAA,IACPJ,KAAAA,YAAc,IAAIrC,MAClBqC,KAAAA,YAAYpC,IAAM,qBAElBqC,KAAAA,YAAc,IAAItC,MAClBsC,KAAAA,YAAYrC,IAAM,0BAElBsC,KAAAA,aAAe,IAAIvC,MACnBuC,KAAAA,aAAatC,IAAM,2BAEnBmC,KAAAA,MAAQ,KAAKC,YACnB,QAAA,QAAA;;ACgEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1MH,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,eAwMG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,kEAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,MAAA,IAAA,UAAA,kDAAA,OAAA,EAAA,IAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,QAtMkBM,EAAAA,WACPrF,SAAAA,EAAAA,GAAU,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAmBZ,EAAA,KAAA,UAAA,CACR,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,E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","file":"Game.8fe60c34.js","sourceRoot":"..","sourcesContent":["const MovingDirection = {\r\n  up: 0,\r\n  down: 1,\r\n  left: 2,\r\n  right: 3,\r\n};\r\n\r\nexport default MovingDirection;\r\n","const Sound = {\r\n  eatDotSound: new Audio(\"sounds/eat_dot.wav\"),\r\n  powerDotSound: new Audio(\"sounds/power_dot.wav\"),\r\n  eatGhostSound: new Audio(\"sounds/eat_ghost.wav\"),\r\n  gameOverSound: new Audio(\"sounds/game_over.wav\"),\r\n  gameWinSound: new Audio(\"sounds/game_win.wav\"),\r\n};\r\n\r\nexport default Sound;\r\n","import MovingDirection from \"./Input.js\";\r\nimport Sound from \"./Sound.js\";\r\n\r\nexport default class Pacman {\r\n  constructor(x, y, tileSize, speed, tileMap) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.tileSize = tileSize;\r\n    this.speed = speed;\r\n    this.tileMap = tileMap;\r\n\r\n    this.currentMovingDirection = null;\r\n    this.requestedMovingDirection = null;\r\n\r\n    this.pacmanAnimationTimerDefault = 10;\r\n    this.pacmanAnimationTimer = null;\r\n\r\n    this.pacmanRotation = this.Rotation.right;\r\n\r\n    this.powerDotActive = false;\r\n    this.powerDotAboutToExpire = false;\r\n    this.timers = [];\r\n\r\n    this.madeFirstMove = false;\r\n\r\n    document.addEventListener(\"keydown\", this.#keydown); // keyboard input\r\n\r\n    this.#loadPacmanImages();\r\n\r\n    //  score logic\r\n    this.score = 0;\r\n    this.highScore = undefined;\r\n    this.dom_score = document.querySelector(\"#score\");\r\n  }\r\n\r\n  Rotation = {\r\n    right: 0,\r\n    down: 1,\r\n    left: 2,\r\n    up: 3,\r\n  };\r\n\r\n  draw(ctx, pause, ghosts) {\r\n    if (!pause) {\r\n      this.#move();\r\n      this.#animate();\r\n    }\r\n    this.#eatDot();\r\n    this.#eatPowerDot();\r\n    this.#eatGhost(ghosts);\r\n\r\n    const size = this.tileSize / 2;\r\n    ctx.save();\r\n    ctx.translate(this.x + size, this.y + size);\r\n    ctx.rotate((this.pacmanRotation * 90 * Math.PI) / 180);\r\n    ctx.drawImage(\r\n      this.pacmanImages[this.pacmanImageIndex],\r\n      -size,\r\n      -size,\r\n      this.tileSize,\r\n      this.tileSize\r\n    );\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  #loadPacmanImages() {\r\n    const pacmanImage1 = new Image();\r\n    pacmanImage1.src = \"/images/pac0.png\";\r\n\r\n    const pacmanImage2 = new Image();\r\n    pacmanImage2.src = \"/images/pac1.png\";\r\n\r\n    const pacmanImage3 = new Image();\r\n    pacmanImage3.src = \"/images/pac2.png\";\r\n\r\n    this.pacmanImages = [\r\n      pacmanImage1,\r\n      pacmanImage2,\r\n      pacmanImage3,\r\n      pacmanImage2,\r\n    ];\r\n\r\n    this.pacmanImageIndex = 0;\r\n  }\r\n\r\n  // Legend: Keycode >> 37 = Left arrow; 38 = up arrow; 39 = right arrow; 40 = down arrow;\r\n  #keydown = (event) => {\r\n    if (event.keyCode == 37) {\r\n      if (this.currentMovingDirection == MovingDirection.right)\r\n        this.currentMovingDirection = MovingDirection.left;\r\n      this.requestedMovingDirection = MovingDirection.left;\r\n      this.madeFirstMove = true;\r\n    }\r\n\r\n    if (event.keyCode == 38) {\r\n      if (this.currentMovingDirection == MovingDirection.down)\r\n        this.currentMovingDirection = MovingDirection.up;\r\n      this.requestedMovingDirection = MovingDirection.up;\r\n      this.madeFirstMove = true;\r\n    }\r\n\r\n    if (event.keyCode == 39) {\r\n      if (this.currentMovingDirection == MovingDirection.left)\r\n        this.currentMovingDirection = MovingDirection.right;\r\n      this.requestedMovingDirection = MovingDirection.right;\r\n      this.madeFirstMove = true;\r\n    }\r\n\r\n    if (event.keyCode == 40) {\r\n      if (this.currentMovingDirection == MovingDirection.up)\r\n        this.currentMovingDirection = MovingDirection.down;\r\n      this.requestedMovingDirection = MovingDirection.down;\r\n      this.madeFirstMove = true;\r\n    }\r\n  };\r\n\r\n  #move() {\r\n    if (this.currentMovingDirection !== this.requestedMovingDirection) {\r\n      if (\r\n        Number.isInteger(this.x / this.tileSize) &&\r\n        Number.isInteger(this.y / this.tileSize)\r\n      ) {\r\n        if (\r\n          !this.tileMap.didCollideWithEnvironment(\r\n            this.x,\r\n            this.y,\r\n            this.requestedMovingDirection\r\n          )\r\n        )\r\n          this.currentMovingDirection = this.requestedMovingDirection;\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.tileMap.didCollideWithEnvironment(\r\n        this.x,\r\n        this.y,\r\n        this.currentMovingDirection\r\n      )\r\n    ) {\r\n      this.pacmanAnimationTimer = null;\r\n      this.pacmanImageIndex = 1;\r\n      return;\r\n    } else if (\r\n      this.currentMovingDirection != null &&\r\n      this.pacmanAnimationTimer == null\r\n    ) {\r\n      this.pacmanAnimationTimer = this.pacmanAnimationTimerDefault;\r\n    }\r\n\r\n    switch (this.currentMovingDirection) {\r\n      case MovingDirection.up:\r\n        this.y -= this.speed;\r\n        this.pacmanRotation = this.Rotation.up;\r\n        break;\r\n      case MovingDirection.down:\r\n        this.y += this.speed;\r\n        this.pacmanRotation = this.Rotation.down;\r\n        break;\r\n      case MovingDirection.left:\r\n        this.x -= this.speed;\r\n        this.pacmanRotation = this.Rotation.left;\r\n        break;\r\n      case MovingDirection.right:\r\n        this.x += this.speed;\r\n        this.pacmanRotation = this.Rotation.right;\r\n        break;\r\n    }\r\n  }\r\n\r\n  #animate() {\r\n    if (this.pacmanAnimationTimer == null) {\r\n      return;\r\n    }\r\n    this.pacmanAnimationTimer--;\r\n    if (this.pacmanAnimationTimer == 0) {\r\n      this.pacmanAnimationTimer = this.pacmanAnimationTimerDefault;\r\n      this.pacmanImageIndex++;\r\n      if (this.pacmanImageIndex == this.pacmanImages.length)\r\n        this.pacmanImageIndex = 0;\r\n    }\r\n  }\r\n\r\n  #eatDot() {\r\n    if (this.tileMap.eatDot(this.x, this.y) && this.madeFirstMove) {\r\n      this.score += 1;\r\n      this.dom_score.innerHTML = `${this.score}`;\r\n      this.updateHighScore();\r\n      Sound.eatDotSound.play();\r\n    }\r\n  }\r\n\r\n  #eatPowerDot() {\r\n    if (this.tileMap.eatPowerDot(this.x, this.y)) {\r\n      this.score += 10;\r\n      this.dom_score.innerHTML = `${this.score}`;\r\n      this.updateHighScore();\r\n      Sound.powerDotSound.play();\r\n      this.powerDotActive = true;\r\n      this.powerDotAboutToExpire = false;\r\n      this.timers.forEach((timer) => clearTimeout(timer));\r\n      this.timers = [];\r\n\r\n      let powerDotTimer = setTimeout(() => {\r\n        this.powerDotActive = false;\r\n        this.powerDotAboutToExpire = false;\r\n      }, 1000 * 6);\r\n\r\n      this.timers.push(powerDotTimer);\r\n\r\n      let powerDotAboutToExpireTimer = setTimeout(() => {\r\n        this.powerDotAboutToExpire = true;\r\n      }, 1000 * 3);\r\n\r\n      this.timers.push(powerDotAboutToExpireTimer);\r\n    }\r\n  }\r\n\r\n  #eatGhost(ghosts) {\r\n    if (this.powerDotActive) {\r\n      const collideGhosts = ghosts.filter((ghost) => ghost.collideWith(this));\r\n      collideGhosts.forEach((ghost) => {\r\n        ghosts.splice(ghosts.indexOf(ghost), 1);\r\n        this.score += 50;\r\n        this.dom_score.innerHTML = `${this.score}`;\r\n        this.updateHighScore();\r\n        Sound.eatGhostSound.play();\r\n      });\r\n    }\r\n  }\r\n\r\n  updateHighScore() {\r\n    this.highScore = JSON.parse(localStorage.getItem(\"High Score\"));\r\n    this.highScore ? null : (this.highScore = this.score);\r\n    this.highScore > this.score\r\n      ? (this.highScore = this.highScore)\r\n      : (this.highScore = this.score);\r\n    localStorage.setItem(\"High Score\", JSON.stringify(this.highScore));\r\n  }\r\n}\r\n","import MovingDirection from \"./Input.js\";\r\n\r\nexport default class Ghost {\r\n  constructor(x, y, tileSize, speed, tileMap) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.tileSize = tileSize;\r\n    this.speed = speed;\r\n    this.tileMap = tileMap;\r\n\r\n    this.#loadImages();\r\n\r\n    this.movingDirection = Math.floor(\r\n      Math.random() * Object.keys(MovingDirection).length\r\n    );\r\n\r\n    this.directionTimerDefault = this.#random(10, 25);\r\n    this.directionTimer = this.directionTimerDefault;\r\n\r\n    this.scaredAboutToExpireTimerDefault = 10;\r\n    this.scaredAboutToExpireTimer = this.scaredAboutToExpireTimerDefault;\r\n  }\r\n\r\n  draw(ctx, pause, pacman) {\r\n    if (!pause) {\r\n      this.#move();\r\n      this.#changeDirection();\r\n    }\r\n    this.#setImage(ctx, pacman);\r\n  }\r\n\r\n  collideWith(pacman) {\r\n    const size = this.tileSize / 2;\r\n    if (\r\n      this.x < pacman.x + size &&\r\n      this.x + size > pacman.x &&\r\n      this.y < pacman.y + size &&\r\n      this.y + size > pacman.y\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  #setImage(ctx, pacman) {\r\n    if (pacman.powerDotActive) {\r\n      this.#setImageWhenPowerDotIsActive(pacman);\r\n    } else {\r\n      this.image = this.normalGhost;\r\n    }\r\n    ctx.drawImage(this.image, this.x, this.y, this.tileSize, this.tileSize);\r\n  }\r\n\r\n  #setImageWhenPowerDotIsActive(pacman) {\r\n    if (pacman.powerDotAboutToExpire) {\r\n      this.scaredAboutToExpireTimer--;\r\n      if (this.scaredAboutToExpireTimer === 0) {\r\n        this.scaredAboutToExpireTimer = this.scaredAboutToExpireTimerDefault;\r\n        if (this.image === this.scaredGhost) {\r\n          this.image = this.scaredGhost2;\r\n        } else {\r\n          this.image = this.scaredGhost;\r\n        }\r\n      }\r\n    } else {\r\n      this.image = this.scaredGhost;\r\n    }\r\n  }\r\n\r\n  #changeDirection() {\r\n    this.directionTimer--;\r\n    let newMoveDirection = null;\r\n    if (this.directionTimer == 0) {\r\n      this.directionTimer = this.directionTimerDefault;\r\n      newMoveDirection = Math.floor(\r\n        Math.random() * Object.keys(MovingDirection).length\r\n      );\r\n    }\r\n\r\n    if (newMoveDirection != null && this.movingDirection != newMoveDirection) {\r\n      if (\r\n        Number.isInteger(this.x / this.tileSize) &&\r\n        Number.isInteger(this.y / this.tileSize)\r\n      ) {\r\n        if (\r\n          !this.tileMap.didCollideWithEnvironment(\r\n            this.x,\r\n            this.y,\r\n            newMoveDirection\r\n          )\r\n        ) {\r\n          this.movingDirection = newMoveDirection;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  #move() {\r\n    if (\r\n      !this.tileMap.didCollideWithEnvironment(\r\n        this.x,\r\n        this.y,\r\n        this.movingDirection\r\n      )\r\n    ) {\r\n      switch (this.movingDirection) {\r\n        case MovingDirection.up:\r\n          this.y -= this.speed;\r\n          break;\r\n        case MovingDirection.down:\r\n          this.y += this.speed;\r\n          break;\r\n        case MovingDirection.left:\r\n          this.x -= this.speed;\r\n          break;\r\n        case MovingDirection.right:\r\n          this.x += this.speed;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  #random(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  #loadImages() {\r\n    this.normalGhost = new Image();\r\n    this.normalGhost.src = \"/images/ghost1.png\";\r\n\r\n    this.scaredGhost = new Image();\r\n    this.scaredGhost.src = \"/images/scaredGhost.png\";\r\n\r\n    this.scaredGhost2 = new Image();\r\n    this.scaredGhost2.src = \"/images/scaredGhost2.png\";\r\n\r\n    this.image = this.normalGhost;\r\n  }\r\n}\r\n","import Pacman from \"./Pacman.js\";\r\nimport Ghost from \"./Ghost.js\";\r\nimport MovingDirection from \"./Input.js\";\r\n\r\nexport default class TileMap {\r\n  constructor(tileSize) {\r\n    this.tileSize = tileSize;\r\n\r\n    this.yellowDot = new Image();\r\n    this.yellowDot.src = \"/images/yellowDot.png\";\r\n    // this.yellowDot.src = \"https://i.ibb.co/vsqT0FR/bonbon.gif\";\r\n\r\n    this.pinkDot = new Image();\r\n    this.pinkDot.src = \"/images/pinkDot.png\";\r\n\r\n    this.wall = new Image();\r\n    this.wall.src = \"/images/wall.png\";\r\n\r\n    this.powerDot = this.pinkDot;\r\n    this.powerDotAnmationTimerDefault = 30;\r\n    this.powerDotAnmationTimer = this.powerDotAnmationTimerDefault;\r\n  }\r\n\r\n  // Legend:>> 0 - dots; 1 - wall; 2 - empty space; 3 - ghost; 4 - pacman; 5 - power pellet\r\n  gameMap = [\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 1],\r\n    [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\r\n    [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1],\r\n    [1, 0, 0, 0, 0, 1, 5, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\r\n    [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1],\r\n    [1, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0, 1, 0, 1, 2, 2, 1],\r\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 1],\r\n    [1, 4, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 1],\r\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 1],\r\n    [1, 2, 2, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 1, 0, 1, 2, 2, 1],\r\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\r\n    [1, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 1],\r\n    [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\r\n    [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  ];\r\n\r\n  draw(ctx) {\r\n    for (let row = 0; row < this.gameMap.length; row++) {\r\n      for (let column = 0; column < this.gameMap[row].length; column++) {\r\n        let tile = this.gameMap[row][column];\r\n        if (tile === 0) {\r\n          this.#drawDot(ctx, column, row, this.tileSize);\r\n        } else if (tile === 1) {\r\n          this.#drawWall(ctx, column, row, this.tileSize);\r\n        } else if (tile == 2) {\r\n          this.#drawBlank(ctx, column, row, this.tileSize);\r\n        } else {\r\n          this.#drawPowerDot(ctx, column, row, this.tileSize);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  #drawDot(ctx, column, row, size) {\r\n    ctx.drawImage(\r\n      this.yellowDot,\r\n      column * this.tileSize,\r\n      row * this.tileSize,\r\n      size,\r\n      size\r\n    );\r\n  }\r\n\r\n  #drawPowerDot(ctx, column, row, size) {\r\n    this.powerDotAnmationTimer--;\r\n    if (this.powerDotAnmationTimer === 0) {\r\n      this.powerDotAnmationTimer = this.powerDotAnmationTimerDefault;\r\n      if (this.powerDot == this.pinkDot) {\r\n        this.powerDot = this.yellowDot;\r\n      } else {\r\n        this.powerDot = this.pinkDot;\r\n      }\r\n    }\r\n    ctx.drawImage(this.powerDot, column * size, row * size, size, size);\r\n  }\r\n\r\n  #drawWall(ctx, column, row, size) {\r\n    ctx.drawImage(\r\n      this.wall,\r\n      column * this.tileSize,\r\n      row * this.tileSize,\r\n      size,\r\n      size\r\n    );\r\n  }\r\n\r\n  #drawBlank(ctx, column, row, size) {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(column * this.tileSize, row * this.tileSize, size, size);\r\n  }\r\n\r\n  getPacman(speed) {\r\n    for (let row = 0; row < this.gameMap.length; row++) {\r\n      for (let column = 0; column < this.gameMap[row].length; column++) {\r\n        let tile = this.gameMap[row][column];\r\n        if (tile === 4) {\r\n          // 4 --> pacman\r\n          this.gameMap[row][column] = 0;\r\n          return new Pacman(\r\n            column * this.tileSize,\r\n            row * this.tileSize,\r\n            this.tileSize,\r\n            speed,\r\n            this\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getGhosts(speed) {\r\n    const ghosts = [];\r\n\r\n    for (let row = 0; row < this.gameMap.length; row++) {\r\n      for (let column = 0; column < this.gameMap[row].length; column++) {\r\n        const tile = this.gameMap[row][column];\r\n        if (tile == 3) {\r\n          this.gameMap[row][column] = 0;\r\n          ghosts.push(\r\n            new Ghost(\r\n              column * this.tileSize,\r\n              row * this.tileSize,\r\n              this.tileSize,\r\n              speed,\r\n              this\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return ghosts;\r\n  }\r\n\r\n  setCanvasSize(canvas) {\r\n    canvas.width = this.gameMap[0].length * this.tileSize;\r\n    canvas.height = this.gameMap.length * this.tileSize;\r\n  }\r\n\r\n  didCollideWithEnvironment(x, y, direction) {\r\n    if (direction == null) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      Number.isInteger(x / this.tileSize) &&\r\n      Number.isInteger(y / this.tileSize)\r\n    ) {\r\n      let column = 0;\r\n      let row = 0;\r\n      let nextColumn = 0;\r\n      let nextRow = 0;\r\n\r\n      switch (direction) {\r\n        case MovingDirection.right:\r\n          nextColumn = x + this.tileSize;\r\n          column = nextColumn / this.tileSize;\r\n          row = y / this.tileSize;\r\n          break;\r\n        case MovingDirection.left:\r\n          nextColumn = x - this.tileSize;\r\n          column = nextColumn / this.tileSize;\r\n          row = y / this.tileSize;\r\n          break;\r\n        case MovingDirection.up:\r\n          nextRow = y - this.tileSize;\r\n          row = nextRow / this.tileSize;\r\n          column = x / this.tileSize;\r\n          break;\r\n        case MovingDirection.down:\r\n          nextRow = y + this.tileSize;\r\n          row = nextRow / this.tileSize;\r\n          column = x / this.tileSize;\r\n          break;\r\n      }\r\n      const tile = this.gameMap[row][column];\r\n      if (tile === 1) {\r\n        // if 1, we're colliding with a wall\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  didWin() {\r\n    return this.#dotsLeft() === 0;\r\n  }\r\n\r\n  #dotsLeft() {\r\n    return this.gameMap.flat().filter((tile) => tile === 0).length;\r\n  }\r\n\r\n  eatDot(x, y) {\r\n    const row = y / this.tileSize;\r\n    const column = x / this.tileSize;\r\n    if (Number.isInteger(row) && Number.isInteger(column)) {\r\n      if (this.gameMap[row][column] === 0) {\r\n        this.gameMap[row][column] = 2;\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  eatPowerDot(x, y) {\r\n    const row = y / this.tileSize;\r\n    const column = x / this.tileSize;\r\n    if (Number.isInteger(row) && Number.isInteger(column)) {\r\n      const tile = this.gameMap[row][column];\r\n      if (tile === 5) {\r\n        this.gameMap[row][column] = 2;\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import TileMap from \"./TileMap.js\";\r\nimport Sound from \"./Sound.js\";\r\n\r\nconst canvas = document.getElementById(\"game-canvas\"),\r\n  ctx = canvas.getContext(\"2d\"),\r\n  GAME_OVER = document.getElementById(\"game-over\"),\r\n  YOU_WON = document.getElementById(\"you-won\"),\r\n  YOU_LOSE = document.getElementById(\"you-lose\"),\r\n  restart = document.getElementById(\"restart\"),\r\n  soundElement = document.getElementById(\"sound\"),\r\n  tileSize = 32,\r\n  speed = 2,\r\n  tileMap = new TileMap(tileSize),\r\n  pacman = tileMap.getPacman(speed),\r\n  ghosts = tileMap.getGhosts(speed);\r\n\r\nlet gameOver = false,\r\n  gameWin = false;\r\n\r\nfunction gameLoop() {\r\n  tileMap.draw(ctx);\r\n  drawGameEnd();\r\n  pacman.draw(ctx, pause(), ghosts);\r\n  ghosts.forEach((ghost) => ghost.draw(ctx, pause(), pacman));\r\n  checkGameOver();\r\n  checkGameWin();\r\n}\r\n\r\nfunction checkGameWin() {\r\n  if (!gameWin) {\r\n    gameWin = tileMap.didWin();\r\n    if (gameWin) {\r\n      Sound.gameWinSound.play();\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkGameOver() {\r\n  if (!gameOver) {\r\n    gameOver = isGameOver();\r\n    if (gameOver) {\r\n      Sound.gameOverSound.play();\r\n    }\r\n  }\r\n}\r\n\r\nfunction isGameOver() {\r\n  return ghosts.some(\r\n    (ghost) => !pacman.powerDotActive && ghost.collideWith(pacman)\r\n  );\r\n}\r\n\r\nfunction pause() {\r\n  return !pacman.madeFirstMove || gameOver || gameWin;\r\n}\r\n\r\nfunction drawGameEnd() {\r\n  if (gameOver || gameWin) {\r\n    showYouWon();\r\n    drawHighScore();\r\n    if (gameOver) {\r\n      showYouLose();\r\n      drawHighScore();\r\n    }\r\n  }\r\n}\r\n\r\ntileMap.setCanvasSize(canvas);\r\nsetInterval(gameLoop, 1000 / 75);\r\n\r\nsoundElement.addEventListener(\"click\", audioManager);\r\n\r\nexport function audioManager() {\r\n  let imgSrc = soundElement.getAttribute(\"src\");\r\n  let SOUND_IMG =\r\n    imgSrc === \"/images/volume-on.png\"\r\n      ? \"/images/volume-mute.png\"\r\n      : \"/images/volume-on.png\";\r\n\r\n  soundElement.setAttribute(\"src\", SOUND_IMG);\r\n  console.log(SOUND_IMG);\r\n  Sound.gameWinSound.muted = Sound.gameWinSound.muted ? false : true;\r\n  Sound.gameOverSound.muted = Sound.gameOverSound.muted ? false : true;\r\n  Sound.eatDotSound.muted = Sound.eatDotSound.muted ? false : true;\r\n  Sound.powerDotSound.muted = Sound.powerDotSound.muted ? false : true;\r\n  Sound.eatGhostSound.muted = Sound.eatGhostSound.muted ? false : true;\r\n}\r\n\r\nrestart.addEventListener(\"click\", function () {\r\n  location.reload();\r\n});\r\n\r\nfunction showYouWon() {\r\n  GAME_OVER.style.display = \"block\";\r\n  YOU_WON.style.display = \"block\";\r\n}\r\n\r\nfunction showYouLose() {\r\n  GAME_OVER.style.display = \"block\";\r\n  YOU_LOSE.style.display = \"block\";\r\n}\r\n\r\nfunction drawHighScore() {\r\n  let highScore = JSON.parse(localStorage.getItem(\"High Score\"));\r\n  let gradient = ctx.createLinearGradient(0, 0, canvas.width / 2, 26);\r\n  gradient.addColorStop(\"0\", \"yellow\");\r\n  gradient.addColorStop(\"1\", \"#f7ae15\");\r\n  ctx.fillStyle = gradient;\r\n  ctx.textAlign = \"center\";\r\n  ctx.font = \"bold 35px 'Fun Games', sans-serif\";\r\n  ctx.fillText(\"HIGHEST SCORE : \" + highScore, canvas.width / 2, 26);\r\n}\r\n"]}